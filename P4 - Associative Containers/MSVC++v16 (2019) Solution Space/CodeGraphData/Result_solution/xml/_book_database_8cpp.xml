<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_book_database_8cpp" kind="file">
    <compoundname>BookDatabase.cpp</compoundname>
    <includes local="no">filesystem</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/yvals_core.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/istream</includes>
    <includes refid="_book_8hpp" local="yes">Book.hpp</includes>
    <includes refid="_book_database_8hpp" local="yes">BookDatabase.hpp</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/tuple</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/new</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/type_traits</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/xutility</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/xtree</includes>
    <includes local="no">C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/xmemory</includes>
    <incdepgraph>
      <node id="94">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/istream</label>
      </node>
      <node id="91">
        <label>filesystem</label>
      </node>
      <node id="90">
        <label>Z:/P4 - Associative Containers/SourceCode/BookDatabase.cpp</label>
        <link refid="BookDatabase.cpp"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/xtree</label>
      </node>
      <node id="103">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/new</label>
      </node>
      <node id="97">
        <label>string</label>
      </node>
      <node id="101">
        <label>map</label>
      </node>
      <node id="93">
        <label>fstream</label>
      </node>
      <node id="102">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/tuple</label>
      </node>
      <node id="92">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/yvals_core.h</label>
      </node>
      <node id="98">
        <label>string_view</label>
      </node>
      <node id="104">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/type_traits</label>
      </node>
      <node id="96">
        <label>iostream</label>
      </node>
      <node id="100">
        <label>cstddef</label>
      </node>
      <node id="99">
        <label>BookDatabase.hpp</label>
        <link refid="_book_database_8hpp"/>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/xutility</label>
      </node>
      <node id="107">
        <label>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/include/xmemory</label>
      </node>
      <node id="95">
        <label>Book.hpp</label>
        <link refid="_book_8hpp"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_book_8hpp" kindref="compound">Book.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_book_database_8hpp" kindref="compound">BookDatabase.hpp</ref>&quot;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>one<sp/>and<sp/>only<sp/>instance<sp/>of<sp/>the<sp/>database</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_book_database_1ac21ac248fbeaa4d38846f0f08213c3b5" refkind="member"><highlight class="normal"><ref refid="class_book_database" kindref="compound">BookDatabase</ref><sp/>&amp;<sp/><ref refid="class_book_database_1ac21ac248fbeaa4d38846f0f08213c3b5" kindref="member">BookDatabase::instance</ref>()</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>std::string<sp/>filename;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>forget<sp/>to<sp/>#include<sp/>&lt;filesystem&gt;<sp/>to<sp/>get<sp/>visibility<sp/>to<sp/>the<sp/>exists()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>a<sp/>prioritized<sp/>list<sp/>of<sp/>database<sp/>files<sp/>in<sp/>the<sp/>current<sp/>working<sp/>directory<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(<sp/>std::filesystem::exists(<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Full.dat&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>)<sp/>)filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Full.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>std::filesystem::exists(<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Large.dat&quot;</highlight><highlight class="normal"><sp/><sp/>)<sp/>)filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Large.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>std::filesystem::exists(<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Medium.dat&quot;</highlight><highlight class="normal"><sp/>)<sp/>)filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Medium.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>std::filesystem::exists(<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Small.dat&quot;</highlight><highlight class="normal"><sp/><sp/>)<sp/>)filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Open<sp/>Library<sp/>Database-Small.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>std::filesystem::exists(<sp/></highlight><highlight class="stringliteral">&quot;Sample_Book_Database.dat&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>)filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Sample_Book_Database.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_book_database" kindref="compound">BookDatabase</ref><sp/>theInstance(<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theInstance;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_book_database_1ad3d6f50934ee8e0fa251a9c9c88d885a" refkind="member"><highlight class="normal"><ref refid="class_book_database_1ad3d6f50934ee8e0fa251a9c9c88d885a" kindref="member">BookDatabase::BookDatabase</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>filename<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>fin(<sp/>filename,<sp/>std::ios::binary<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="class_book" kindref="compound">Book</ref><sp/>book;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>fin<sp/>&gt;&gt;<sp/>book<sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_book_database_1a486b2b836609758527a5c90e8e0a2301" kindref="member">_data</ref>[book.<ref refid="class_book_1a9c632960c6ce891b6a8b28b109415f63" kindref="member">isbn</ref>()]<sp/>=<sp/>book;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/><sp/>The<sp/>file<sp/>is<sp/>intentionally<sp/>not<sp/>explicitly<sp/>closed.<sp/><sp/>The<sp/>file<sp/>is<sp/>closed<sp/>when<sp/>fin<sp/>goes<sp/>out<sp/>of<sp/>scope<sp/>-<sp/>for<sp/>whatever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason.<sp/><sp/>More<sp/>precisely,<sp/>the<sp/>object<sp/>named<sp/>&quot;fin&quot;<sp/>is<sp/>destroyed<sp/>when<sp/>it<sp/>goes<sp/>out<sp/>of<sp/>scope<sp/>and<sp/>the<sp/>file<sp/>is<sp/>closed<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destructor.<sp/>See<sp/>RAII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_book_database_1a6da886061bd5c42cdb0fa79dc35684d1" refkind="member"><highlight class="normal"><ref refid="class_book" kindref="compound">Book</ref><sp/>*<sp/><ref refid="class_book_database_1a6da886061bd5c42cdb0fa79dc35684d1" kindref="member">BookDatabase::find</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>isbn<sp/>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_book_database_1a486b2b836609758527a5c90e8e0a2301" kindref="member">_data</ref>.find(<sp/>isbn<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/><ref refid="class_book_database_1a486b2b836609758527a5c90e8e0a2301" kindref="member">_data</ref>.end()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/>book_ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_book" kindref="compound">Book</ref>(<sp/>it-&gt;second<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>book_ptr;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="class_book_database_1ad7a0da3be246f111471fa42e6782e276" refkind="member"><highlight class="normal">std::size_t<sp/><ref refid="class_book_database_1ad7a0da3be246f111471fa42e6782e276" kindref="member">BookDatabase::size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="89"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_book_database_1a486b2b836609758527a5c90e8e0a2301" kindref="member">_data</ref>.size();</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Z:/P4 - Associative Containers/SourceCode/BookDatabase.cpp"/>
  </compounddef>
</doxygen>
